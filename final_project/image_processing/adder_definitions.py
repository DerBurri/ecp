#!/usr/bin/env python3

# # Adders
#
# Author: Vladislav Valek
#
# ## Exact Adder Function
#
# Outpus also the energy consumption for each result.

# In[30]:

# def exactAdder(a, b, c):
#     truth_table = {
#         ("000", "000", 0) : ("000", 0, 200, 1.3),
#         ("000", "000", 1) : ("001", 0, 200, 1.3),
#         ("000", "001", 0) : ("100", 0, 200, 1.3),
#         ("000", "001", 1) : ("101", 0, 200, 1.3),
#         ("000", "010", 0) : ("010", 0, 200, 1.3),
#         ("000", "010", 1) : ("011", 0, 200, 1.3),
#         ("000", "011", 0) : ("110", 0, 200, 1.3),
#         ("000", "011", 1) : ("111", 0, 200, 1.3),
#         ("000", "100", 0) : ("001", 0, 200, 1.3),
#         ("000", "100", 1) : ("010", 0, 200, 1.3),
#         ("000", "101", 0) : ("101", 0, 200, 1.3),
#         ("000", "101", 1) : ("110", 0, 200, 1.3),
#         ("000", "110", 0) : ("011", 0, 200, 1.3),
#         ("000", "110", 1) : ("100", 0, 200, 1.3),
#         ("000", "111", 0) : ("111", 0, 200, 1.3),
#         ("000", "111", 1) : ("000", 1, 200, 1.3),
#         ("001", "000", 0) : ("100", 0, 200, 1.3),
#         ("001", "000", 1) : ("101", 0, 200, 1.3),
#         ("001", "001", 0) : ("000", 1, 200, 1.3),
#         ("001", "001", 1) : ("001", 1, 200, 1.3),
#         ("001", "010", 0) : ("110", 0, 200, 1.3),
#         ("001", "010", 1) : ("111", 0, 200, 1.3),
#         ("001", "011", 0) : ("010", 1, 200, 1.3),
#         ("001", "011", 1) : ("011", 1, 200, 1.3),
#         ("001", "100", 0) : ("101", 0, 200, 1.3),
#         ("001", "100", 1) : ("110", 0, 200, 1.3),
#         ("001", "101", 0) : ("001", 1, 200, 1.3),
#         ("001", "101", 1) : ("010", 1, 200, 1.3),
#         ("001", "110", 0) : ("111", 0, 200, 1.3),
#         ("001", "110", 1) : ("000", 1, 200, 1.3),
#         ("001", "111", 0) : ("011", 1, 200, 1.3),
#         ("001", "111", 1) : ("100", 1, 200, 1.3),
#         ("010", "000", 0) : ("010", 0, 200, 1.3),
#         ("010", "000", 1) : ("011", 0, 200, 1.3),
#         ("010", "001", 0) : ("110", 0, 200, 1.3),
#         ("010", "001", 1) : ("111", 0, 200, 1.3),
#         ("010", "010", 0) : ("100", 0, 200, 1.3),
#         ("010", "010", 1) : ("101", 0, 200, 1.3),
#         ("010", "011", 0) : ("000", 1, 200, 1.3),
#         ("010", "011", 1) : ("001", 1, 200, 1.3),
#         ("010", "100", 0) : ("011", 0, 200, 1.3),
#         ("010", "100", 1) : ("100", 0, 200, 1.3),
#         ("010", "101", 0) : ("111", 0, 200, 1.3),
#         ("010", "101", 1) : ("000", 1, 200, 1.3),
#         ("010", "110", 0) : ("101", 0, 200, 1.3),
#         ("010", "110", 1) : ("110", 0, 200, 1.3),
#         ("010", "111", 0) : ("001", 1, 200, 1.3),
#         ("010", "111", 1) : ("010", 1, 200, 1.3),
#         ("011", "000", 0) : ("110", 0, 200, 1.3),
#         ("011", "000", 1) : ("111", 0, 200, 1.3),
#         ("011", "001", 0) : ("010", 1, 200, 1.3),
#         ("011", "001", 1) : ("011", 1, 200, 1.3),
#         ("011", "010", 0) : ("000", 1, 200, 1.3),
#         ("011", "010", 1) : ("001", 1, 200, 1.3),
#         ("011", "011", 0) : ("100", 1, 200, 1.3),
#         ("011", "011", 1) : ("101", 1, 200, 1.3),
#         ("011", "100", 0) : ("111", 0, 200, 1.3),
#         ("011", "100", 1) : ("000", 1, 200, 1.3),
#         ("011", "101", 0) : ("011", 1, 200, 1.3),
#         ("011", "101", 1) : ("100", 1, 200, 1.3),
#         ("011", "110", 0) : ("001", 1, 200, 1.3),
#         ("011", "110", 1) : ("010", 1, 200, 1.3),
#         ("011", "111", 0) : ("101", 1, 200, 1.3),
#         ("011", "111", 1) : ("110", 1, 200, 1.3),
#         ("100", "000", 0) : ("001", 0, 200, 1.3),
#         ("100", "000", 1) : ("010", 0, 200, 1.3),
#         ("100", "001", 0) : ("101", 0, 200, 1.3),
#         ("100", "001", 1) : ("110", 0, 200, 1.3),
#         ("100", "010", 0) : ("011", 0, 200, 1.3),
#         ("100", "010", 1) : ("100", 0, 200, 1.3),
#         ("100", "011", 0) : ("111", 0, 200, 1.3),
#         ("100", "011", 1) : ("000", 1, 200, 1.3),
#         ("100", "100", 0) : ("010", 0, 200, 1.3),
#         ("100", "100", 1) : ("011", 0, 200, 1.3),
#         ("100", "101", 0) : ("110", 0, 200, 1.3),
#         ("100", "101", 1) : ("111", 0, 200, 1.3),
#         ("100", "110", 0) : ("100", 0, 200, 1.3),
#         ("100", "110", 1) : ("101", 0, 200, 1.3),
#         ("100", "111", 0) : ("000", 1, 200, 1.3),
#         ("100", "111", 1) : ("001", 1, 200, 1.3),
#         ("101", "000", 0) : ("101", 0, 200, 1.3),
#         ("101", "000", 1) : ("110", 0, 200, 1.3),
#         ("101", "001", 0) : ("001", 1, 200, 1.3),
#         ("101", "001", 1) : ("010", 1, 200, 1.3),
#         ("101", "010", 0) : ("111", 0, 200, 1.3),
#         ("101", "010", 1) : ("000", 1, 200, 1.3),
#         ("101", "011", 0) : ("011", 1, 200, 1.3),
#         ("101", "011", 1) : ("100", 1, 200, 1.3),
#         ("101", "100", 0) : ("110", 0, 200, 1.3),
#         ("101", "100", 1) : ("111", 0, 200, 1.3),
#         ("101", "101", 0) : ("010", 1, 200, 1.3),
#         ("101", "101", 1) : ("011", 1, 200, 1.3),
#         ("101", "110", 0) : ("000", 1, 200, 1.3),
#         ("101", "110", 1) : ("001", 1, 200, 1.3),
#         ("101", "111", 0) : ("100", 1, 200, 1.3),
#         ("101", "111", 1) : ("101", 1, 200, 1.3),
#         ("110", "000", 0) : ("011", 0, 200, 1.3),
#         ("110", "000", 1) : ("100", 0, 200, 1.3),
#         ("110", "001", 0) : ("111", 0, 200, 1.3),
#         ("110", "001", 1) : ("000", 1, 200, 1.3),
#         ("110", "010", 0) : ("101", 0, 200, 1.3),
#         ("110", "010", 1) : ("110", 0, 200, 1.3),
#         ("110", "011", 0) : ("001", 1, 200, 1.3),
#         ("110", "011", 1) : ("010", 1, 200, 1.3),
#         ("110", "100", 0) : ("100", 0, 200, 1.3),
#         ("110", "100", 1) : ("101", 0, 200, 1.3),
#         ("110", "101", 0) : ("000", 1, 200, 1.3),
#         ("110", "101", 1) : ("001", 1, 200, 1.3),
#         ("110", "110", 0) : ("110", 0, 200, 1.3),
#         ("110", "110", 1) : ("111", 0, 200, 1.3),
#         ("110", "111", 0) : ("010", 1, 200, 1.3),
#         ("110", "111", 1) : ("011", 1, 200, 1.3),
#         ("111", "000", 0) : ("111", 0, 200, 1.3),
#         ("111", "000", 1) : ("000", 1, 200, 1.3),
#         ("111", "001", 0) : ("011", 1, 200, 1.3),
#         ("111", "001", 1) : ("100", 1, 200, 1.3),
#         ("111", "010", 0) : ("001", 1, 200, 1.3),
#         ("111", "010", 1) : ("010", 1, 200, 1.3),
#         ("111", "011", 0) : ("101", 1, 200, 1.3),
#         ("111", "011", 1) : ("110", 1, 200, 1.3),
#         ("111", "100", 0) : ("000", 1, 200, 1.3),
#         ("111", "100", 1) : ("001", 1, 200, 1.3),
#         ("111", "101", 0) : ("100", 1, 200, 1.3),
#         ("111", "101", 1) : ("101", 1, 200, 1.3),
#         ("111", "110", 0) : ("010", 1, 200, 1.3),
#         ("111", "110", 1) : ("011", 1, 200, 1.3),
#         ("111", "111", 0) : ("110", 1, 200, 1.3),
#         ("111", "111", 1) : ("111", 1, 200, 1.3),
#     }

#     a_bin = bin(a)[2:].zfill(3)
#     b_bin = bin(b)[2:].zfill(3)



def exactAdder(a, b, c):
    if a==0 and b==0 and c==0:
        s=0
        c_out=0
        energy_consumption = 4971
    elif a==0 and b==0 and c==1:
        s=1
        c_out=0
        energy_consumption = 123
    elif a==0 and b==1 and c==0:
        s=1
        c_out=0
        energy_consumption = 3021
    elif a==0 and b==1 and c==1:
        s=0
        c_out=1
        energy_consumption = 8293
    elif a==1 and b==0 and c==0:
        s=1
        c_out=0
        energy_consumption = 2175
    elif a==1 and b==0 and c==1:
        s=0
        c_out=1
        energy_consumption = 2397
    elif a==1 and b==1 and c==0:
        s=0
        c_out=1
        energy_consumption = 1092
    elif a==1 and b==1 and c==1:
        s=1
        c_out=1
        energy_consumption = 13
    return s, c_out, energy_consumption


# ## Approximate Adder Function
#
# The output result deviates from the exact solution.
#
# Failure Cases:
# - Input (0, 0, 0): Incorrect sum (s) = 1 Correct carry-out (c_out) = 0
# - Input (1, 1, 1): Incorrect sum (s) = 0 Correct carry-out (c_out) = 1
#

# In[31]:


def approxAdder(a, b, c):
    if a==0 and b==0 and c==0:
        s=1
        c_out=0
        energy_consumption = 984
    elif a==0 and b==0 and c==1:
        s=1
        c_out=0
        energy_consumption = 1098
    elif a==0 and b==1 and c==0:
        s=1
        c_out=0
        energy_consumption = 831
    elif a==0 and b==1 and c==1:
        s=0
        c_out=1
        energy_consumption = 239
    elif a==1 and b==0 and c==0:
        s=1
        c_out=0
        energy_consumption = 492
    elif a==1 and b==0 and c==1:
        s=0
        c_out=1
        energy_consumption = 319
    elif a==1 and b==1 and c==0:
        s=0
        c_out=1
        energy_consumption = 598
    elif a==1 and b==1 and c==1:
        s=0
        c_out=1
        energy_consumption = 658
    return s, c_out, energy_consumption


# ### N-bit Adder Function
#
# The MyNbitAdder function is designed to perform N-bit addition. Approximation takes place from lower bits to higher ones and the amount of approximated bits can be configured with 'approx_until' parameter. THe adder can also work with negative numbers as inputs. The 'n' parameter defines the bit length of the internally represented binary numbers.

# In[32]:


def multiBitAdder(a,b, nbits = 12, approx_until = 0):

    # Ensure that a and b are within range of signed integer
    a = (a + 2**(nbits - 1)) % 2**nbits - 2**(nbits - 1)
    b = (b + 2**(nbits - 1)) % 2**nbits - 2**(nbits - 1)

    #convert to binary and cut off the first two indices (they dont belong to the number but indicate that it is binary)
    # Eventually fill with 0 to the full length of n
    a_bin = bin(a & ((1 << nbits) - 1))[2:].zfill(nbits)
    b_bin = bin(b & ((1 << nbits) - 1))[2:].zfill(nbits)

    #reverse order bits for the adder
    rev_a , rev_b = list(a_bin[::-1]), list(b_bin[::-1])

    carry_over   = 0
    total_sum    = 0
    total_energy = 0

    #we want to do a bitwise addition
    for index, (bit1, bit2) in enumerate( zip(rev_a, rev_b) ):

        if index < approx_until:
            #use approx_adder
            sum_element, carry_over, energy = approxAdder(int(bit1), int(bit2), int(carry_over) )
        else:
            #use exact_adder
            sum_element, carry_over, energy = exactAdder(int(bit1), int(bit2), int(carry_over) )

        total_sum += pow(2,index)*sum_element
        total_energy += energy

    if total_sum >= 2**(nbits-1):
        total_sum -= 2**nbits

    return total_sum, total_energy
